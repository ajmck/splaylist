@page "/playlists/{id}"

@using splaylist.Helpers
@using SpotifyAPI.Web.Models
@using  Blazorise.DataGrid
@using splaylist.Models

@using Syncfusion.EJ2.Blazor.Grids

@inject API api

<button @onclick="Refresh">Refresh</button>
<RefreshableComponent Interval="500" Enabled="@_isLoading">
@if (loadedPlaylist == null)
{
    <p>Loading Playlist...</p>
}
else
{
    <h2>@loadedPlaylist.Name</h2>

    @if (_depager == null)
    {
        <p>Loading Contents...</p>
    }
    else
    {
        @if (_isLoading)
        {
            <p>Loaded @_depager.LoadedCount out of @_depager.AvailableCount tracks.</p>
        }
        else
        {


            <p>Selected: @SelectedValue</p>

            <EjsGrid DataSource="@_results"
                     @ref="@Grid"
                     AllowSorting="true"
                     AllowFiltering="true"
                     AllowGrouping="true"
                     AllowSelection="true"
                     ShowColumnChooser="true"
                     Toolbar="@( new List<string>() { "ColumnChooser"})">
                @*ContextMenuItems="@(new List<object>() { "AutoFit", "AutoFitAll", "SortAscending", "SortDescending","Copy", "Delete", "Save", "Cancel"})">*@

                <GridFilterSettings Type="FilterType.Excel"></GridFilterSettings>
                @* Below won't work properly until a column has been designated the primary key *@
                <GridSelectionSettings PersistSelection="true" Type="SelectionType.Multiple"></GridSelectionSettings>
                <GridEvents RowSelected="GetSelectedRecords" TValue="TrackWithSelect"></GridEvents>

                <GridColumns>
                    <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
                    <GridColumn Field="@nameof(TrackWithSelect.TrackTitle)" HeaderText="Title"></GridColumn>
                    <GridColumn Field="@nameof(TrackWithSelect.Album)" HeaderText="Album"></GridColumn>
                    <GridColumn Field="@nameof(TrackWithSelect.OriginalTrack.Artists)" HeaderText="Artists"></GridColumn>
                    <GridColumn Field="@nameof(TrackWithSelect.AlbumDate)" HeaderText="Release Date"></GridColumn>
                    <GridColumn Field="@nameof(TrackWithSelect.GenreString)" HeaderText="Genres" Visible="false"></GridColumn>
                </GridColumns>
            </EjsGrid>

        }
    }
}
</RefreshableComponent>

@code
{
    /// <summary>
    /// Use this while all track info is yet to finish
    /// </summary>
    private bool _isLoading = true;

    private TrackWithSelect _selectedTrack;




    private enum LoadingStatus
    {
        None,
        LoadingInitialPlaylist,
        LoadingDepaged,
        LoadedBasic,
        LoadingExtended,
        LoadedExtended
    }

    [Parameter]
    public string id { get; set; }

    FullPlaylist loadedPlaylist;
    List<PlaylistTrack> _depagedResults;

    List<TrackWithSelect> _results;

    Depaginator<PlaylistTrack> _depager;



    protected override async Task OnInitializedAsync()
    {
        _depager = new Depaginator<PlaylistTrack>();

        loadedPlaylist = await API.S.GetPlaylistAsync(id);
        var trackPager = loadedPlaylist.Tracks;
        _depagedResults = await _depager.Depage(trackPager);


        _results = new List<TrackWithSelect>();
        foreach (var track in _depagedResults)
        {
            var tws = new TrackWithSelect(track.Track);
            // tws.LoadFullArtist();
            _results.Add(tws);
        }


        RequestSimpleToFull.UpdateFullArtists();
        _isLoading = false;

    }


    protected void Refresh()
    {

        // for genre info
        RequestSimpleToFull.UpdateFullArtists();
        Console.WriteLine(_results);
    }

    protected string IsChecked(TrackWithSelect tws)
    {
        if (tws.Selected) return "checked";
        return null;
    }


    // https://ej2.syncfusion.com/blazor/documentation/grid/selection/?_ga=2.33566754.227004858.1571375845-1129692107.1571375845#get-selected-row-indexes

    EjsGrid<TrackWithSelect> Grid;
    public List<double> SelectedRowIndexes { get; set; }
    public string SelectedValue;
     

    public async void GetSelectedRecords(RowSelectEventArgs<TrackWithSelect> args)
    {
        double[] TotalValue;

        SelectedRowIndexes = await this.Grid.GetSelectedRowIndexes();
        TotalValue = SelectedRowIndexes.ToArray();
        SelectedValue = "";
        foreach (var data in TotalValue)
        {
            // must convert as EjsGrid.GetSelectedRowIndexes returns an array of doubles, but the list only takes strings
            SelectedValue = SelectedValue + " " + _results[Convert.ToInt32(data)].TrackTitle;
        }
        StateHasChanged();
    }

}
