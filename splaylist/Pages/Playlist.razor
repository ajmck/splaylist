@page "/playlists/{id}"

@using splaylist.Helpers
@using SpotifyAPI.Web.Models
@using  Blazorise.DataGrid
@using splaylist.Models

@inject API api

<button @onclick="Refresh">Refresh</button>
<RefreshableComponent Interval="500" Enabled="@_isLoading">
@if (loadedPlaylist == null)
{
    <p>Loading Playlist...</p>
}
else
{
    <h2>@loadedPlaylist.Name</h2>

    @if (_depager == null)
    {
        <p>Loading Contents...</p>
    }
    else
    {
        @if (_isLoading)
        {
            <p>Loaded @_depager.LoadedCount out of @_depager.AvailableCount tracks.</p>
        }
        else
        {
            /* HACK - PageSize ought to be unlimited, but leaving the parameter out will cap it at 5
            Spotify playlists are capped at 10000 so this shouldn't become an issue */

            
<DataGrid TItem="TrackWithSelect" Data="@_results" PageSize="10000" class="table table-hover table-dark">
    <DataGridColumn TItem="TrackWithSelect" Field="TrackTitle" Caption="Name" AllowSort="true" />
    <DataGridColumn TItem="TrackWithSelect" Field="Album" Caption="Album" AllowSort="true" />
    <DataGridColumn TItem="TrackWithSelect" Field="Artists" Caption="Artists" AllowSort="true" />
    <DataGridColumn TItem="TrackWithSelect" Field="AlbumDate" Caption="Release Date" AllowSort="true" />
    <DataGridColumn TItem="TrackWithSelect" Field="GenreString" Caption="Genre" AllowSort="true" />
</DataGrid>

        }
    }
}
</RefreshableComponent>

@code
{
    /// <summary>
    /// Use this while all track info is yet to finish
    /// </summary>
    private bool _isLoading = true;

    [Parameter]
    public string id { get; set; }

    FullPlaylist loadedPlaylist;
    PlaylistTrack single;
    List<PlaylistTrack> _depagedResults;

    List<TrackWithSelect> _results;

    Depaginator<PlaylistTrack> _depager;



    protected override async Task OnInitializedAsync()
    {
        _depager = new Depaginator<PlaylistTrack>();

        loadedPlaylist = await API.S.GetPlaylistAsync(id);
        var trackPager = loadedPlaylist.Tracks;
        _depagedResults = await _depager.Depage(trackPager);


        _results = new List<TrackWithSelect>();
        foreach (var track in _depagedResults)
        {
            var tws = new TrackWithSelect(track.Track);
            tws.LoadFullArtist();
            _results.Add(tws);
        }

        _isLoading = false;

    }


    protected void Refresh()
    {
        Console.WriteLine(_results);
    }

}
