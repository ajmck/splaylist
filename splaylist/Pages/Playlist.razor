@page "/playlists/{id}"

@using splaylist.Helpers
@using SpotifyAPI.Web.Models
@using splaylist.Models

@using Syncfusion.EJ2.Blazor.Grids

@inject API api

@if (playlist == null)
{
    <p>Loading Playlist...</p>
}
else 
{

    <h2>@playlist.Name</h2>
    <p>Created by @playlist.Owner, @playlist.TrackCount tracks.</p>

    if (!BasicLoaded)
    {
        <p>Loading tracks...</p>
    }
    else if (!ExtendedLoaded)
    {
        <p>Loading detailed track data...</p>
    }
    else
    {

    <EjsGrid DataSource="@playlist.ListingTracks"
             @ref="@Grid"
             AllowSorting="true"
             AllowFiltering="true"
             AllowGrouping="true"
             AllowSelection="true"
             ShowColumnChooser="true"
             Toolbar="@( new List<string>() { "ColumnChooser" })">
        @*ContextMenuItems="@(new List<object>() { "AutoFit", "AutoFitAll", "SortAscending", "SortDescending","Copy", "Delete", "Save", "Cancel"})">*@

        <GridFilterSettings Type="FilterType.Excel"></GridFilterSettings>
        <GridSelectionSettings PersistSelection="true" Type="SelectionType.Multiple"></GridSelectionSettings>
        <GridEvents RowSelected="HandleSelected" TValue="ListingTrack"></GridEvents>
        
        <GridColumns>
            <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
            <GridColumn Field="@nameof(ListingTrack.Index)" HeaderText="#" Visible="false" IsPrimaryKey="true"></GridColumn>

            <GridColumn Field="@nameof(ListingTrack.TrackTitle)" HeaderText="Title"></GridColumn>
            <GridColumn Field="@nameof(ListingTrack.AlbumName)" HeaderText="Album"></GridColumn>
            <GridColumn Field="@nameof(ListingTrack.ArtistString)" HeaderText="Artists"></GridColumn>
            
            <GridColumn Field="@nameof(ListingTrack.AlbumDate)" HeaderText="Release Date" Visible="false"></GridColumn>
            <GridColumn Field="@nameof(ListingTrack.PlaylistAddedDate)" HeaderText="Date Added to Playlist" Format="yMd" Visible="false"></GridColumn>
            <GridColumn Field="@nameof(ListingTrack.Id)" HeaderText="Track ID" Visible="false"></GridColumn>

            <!-- Analysed Values -->
            <GridColumn Field="@nameof(ListingTrack.Key)" HeaderText="Key" Visible="false"></GridColumn>
            <GridColumn Field="@nameof(ListingTrack.Mode)" HeaderText="Major/Minor" Visible="false"></GridColumn>

            <GridColumn Field="@nameof(ListingTrack.Tempo)" HeaderText="Tempo" Visible="false"></GridColumn>
            <GridColumn Field="@nameof(ListingTrack.TimeSignatureString)" HeaderText="Time Signature" Visible="false"></GridColumn>

            <GridColumn Field="@nameof(ListingTrack.Acousticness)" HeaderText="Acousticness" Visible="false"></GridColumn>
            <GridColumn Field="@nameof(ListingTrack.Danceability)" HeaderText="Danceability" Visible="false"></GridColumn>
            <GridColumn Field="@nameof(ListingTrack.Energy)" HeaderText="Energy" Visible="false"></GridColumn>
            <GridColumn Field="@nameof(ListingTrack.Instrumentalness)" HeaderText="Instrumentalness" Visible="false"></GridColumn>
            <GridColumn Field="@nameof(ListingTrack.Liveness)" HeaderText="Liveness" Visible="false"></GridColumn>
            <GridColumn Field="@nameof(ListingTrack.Loudness)" HeaderText="Loudness" Visible="false"></GridColumn>
            <GridColumn Field="@nameof(ListingTrack.Speechiness)" HeaderText="Speechiness" Visible="false"></GridColumn>
            <GridColumn Field="@nameof(ListingTrack.Valence)" HeaderText="Valence" Visible="false"></GridColumn>
             
        </GridColumns>
    </EjsGrid>

    }
}

@code
{

    [Parameter]
    public string id { get; set; }


    bool BasicLoaded;
    bool ExtendedLoaded;

    ListingPlaylist playlist;


    protected override async Task OnInitializedAsync()
    {
        // todo - loading status
        // todo - propagate error
        if (!Cache.Playlists.TryGetValue(id, out playlist))
        {
            // if the playlist isn't in the cache, download it
            throw new NotImplementedException("need to cache playlist here");
        }
        BasicLoaded = await playlist.GetFullPlaylist();
        ExtendedLoaded = await playlist.ExtendTracks();


    }




    // https://ej2.syncfusion.com/blazor/documentation/grid/selection/?_ga=2.33566754.227004858.1571375845-1129692107.1571375845#get-selected-row-indexes

    EjsGrid<ListingTrack> Grid;

    public async void HandleSelected(RowSelectEventArgs<ListingTrack> args)
    {
        Console.WriteLine(args?.Data?.Id);
    }



}
