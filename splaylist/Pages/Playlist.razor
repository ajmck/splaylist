@page "/playlists/{id}"

@using System.Timers
@using splaylist.Helpers
@using SpotifyAPI.Web.Models
@using  Blazorise.DataGrid
@using splaylist.Models
@using SpotifyAPI.Web.Helpers;

@inject APIHelper api


<RefreshableComponent Interval="500" Enabled="@_isLoading">
@if (loadedPlaylist == null)
{
    <p>Loading Playlist...</p>
}
else
{
    <h2>@loadedPlaylist.Name</h2>

    @if (_depager == null)
    {
        <p>Loading Contents...</p>
    }
    else
    {
        @if (_results == null)
        {
            <p>Loaded @_depager.LoadedCount out of @_depager.AvailableCount tracks.</p>
        }
        else
        {
            /* HACK - PageSize ought to be unlimited, but leaving the parameter out will cap it at 5
            Spotify playlists are capped at 10000 so this shouldn't become an issue */

            
            <DataGrid TItem="TrackWithSelect" Data="@_results" PageSize="10000" class="table table-hover table-dark">
                <DataGridColumn TItem="TrackWithSelect" Field="TrackTitle" Caption="Name" AllowSort="true"/>
                <DataGridColumn TItem="TrackWithSelect" Field="Album" Caption="Album" AllowSort="true"/>
                <DataGridColumn TItem="TrackWithSelect" Field="Artists" Caption="Artists" AllowSort="true" />   
            </DataGrid>

        }
    }
}
</RefreshableComponent>

@code
{
    private bool _isLoading = true;


    [Parameter]
    public string id { get; set; }

    FullPlaylist loadedPlaylist;
    PlaylistTrack single;
    List<PlaylistTrack> _depagedResults;

    List<TrackWithSelect> _results;

    Depaginator<PlaylistTrack> _depager;



    protected override async Task OnInitializedAsync()
    {
        _depager = new Depaginator<PlaylistTrack>(APIHelper.S);

        loadedPlaylist = await APIHelper.S.GetPlaylistAsync(id);
        var trackPager = loadedPlaylist.Tracks;
        _depagedResults = await _depager.Depage(trackPager);


        _results = new List<TrackWithSelect>();
        foreach (var track in _depagedResults)
        {
            _results.Add(new TrackWithSelect(track.Track));
        }


        // done = true;

    }

    private string PrintArtists(PlaylistTrack p)
    {
        string result = p.Track?.Artists[0]?.Name;

        // if more than one artist, add seperator
        for (int i = 1; i < p.Track?.Artists.Count; i++)
        {
            result += "; " + p.Track?.Artists[i].Name;
        }
        return result;
    }

}
