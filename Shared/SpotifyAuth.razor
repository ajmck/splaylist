@page "/callback"

@inject HttpClient Http
@inject NavigationManager UriHelper
@inject Config cfg

@* QueryHelpers *@
@using Microsoft.AspNetCore.WebUtilities


<a href="@login_link">Log in with Spotify</a>
<p>@currentUri</p>
<p>Access Token: @access_token</p>
<p>Token Type: @token_type</p>
<p>Expires In: @expires_in</p>
<p>State: @state</p>
<p>Error: @error</p>

@code {


    string GenerateState()
    {
        Random r = new Random();
        return r.Next().ToString();
    }

    string currentUri = "none";
    Uri login_link;


    // Possible parameters after requesting a token
    string access_token = "";
    string token_type = "";
    string expires_in = "";
    string state = "";
    string error = "";


    private void GetLinkParams()
    {
        var uri = new Uri(UriHelper.Uri);
        string uriString = uri.ToString();
        currentUri = uriString;

        // if successful callback, the link contains a "hash fragment" rather than a query string
        // meaning '#' needs to be replaced with '&' (kludge as it isn't correct syntax)
        uriString = uriString.Replace('#', '&');
        // and for some reason the same thing happened while testing error, so replace the initial '?'
        uriString = uriString.Replace('?', '&');

        var parsed = QueryHelpers.ParseQuery(uriString);

        access_token = parsed.TryGetValue("access_token", out var access_token_sv) ? access_token_sv.First() : "";
        token_type = parsed.TryGetValue("token_type", out var token_type_sv) ? token_type_sv.First() : "";
        expires_in = parsed.TryGetValue("expires_in", out var expires_in_sv) ? expires_in_sv.First() : "";
        state = parsed.TryGetValue("state", out var state_sv) ? state_sv.First() : "";
        error = parsed.TryGetValue("error", out var error_sv) ? error_sv.First() : "";

    }

    protected override async Task OnInitializedAsync()
    {
        GetLinkParams();
        login_link = new Uri("https://accounts.spotify.com/authorize" +
                "?response_type=token" +
                // next line won't do anything until nonce is set in a cookie
                //"&state=" + nonce +
                // TODO - move next two to secrets / env variables
                "&client_id=" + cfg.ClientID +
                "&redirect_uri=" + cfg.CallbackURI +
                "&scope=" + cfg.Scopes +
                "&show_dialog=true");

    }


}

